# Stage-1 Build process
# Use the official node:9.6.1 runtime image for the build environment and tag the build as build-deps
FROM node:9.6.1 as build-deps

# Create a working directory for the build project
RUN mkdir /usr/src/app

# Navigate to the created directory
WORKDIR /usr/src/app

# Create an enviroment variable for the node_modules
ENV PATH /usr/src/app/node_modules/.bin:$PATH

# Copy the package.json and the yarn.lock to the working directory
COPY package.json ./
COPY yarn.lock ./

# Install the project dependencies and silence the npm output
RUN yarn install --frozen-lockfile

# Copy everything to the working directory
COPY . /usr/src/app

# Create an optimized build version of the project
RUN npm run build

# Stage-2 Production Environment
# Use the nginx runtime image for the production environment
FROM nginx:1.19-alpine

ENV MSP_PORT=${MSP_PORT:-80}

# Add bash
RUN apk add --no-cache bash

# Make port to the world outside the container
EXPOSE ${MSP_PORT}

# Copy the tagged files from the build to the production environmnet of the nginx server
COPY --from=build-deps /usr/src/app/build /usr/share/nginx/html

# Copy nginx configuration 
COPY --from=build-deps /usr/src/app/docker/default.conf.template /etc/nginx/templates/

# Copy shell script to container
COPY ./startup.sh .

# Make our shell script executable
RUN chmod +x startup.sh

# Start the server
CMD bash startup.sh
